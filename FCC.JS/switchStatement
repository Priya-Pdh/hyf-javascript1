1. Selecting from Many Options with Switch Statements
If you have many options to choose from, use a switch statement. A switch statement tests a value and can have many case statements which define various possible values. Statements are executed from the first matched case value until a break is encountered.

Here is an example of a switch statement:

function caseInSwitch(val) {
  let answer = "";
  // Only change code below this line
  switch(val) {
  case 1:
  answer = "alpha";
  break;
  case 2:
  answer = "beta";
  break;
  case 3:
  answer = "gamma";
  break;
  case 4:
  answer = "delta";
  break;
}

  // Only change code above this line
  return answer;
}

caseInSwitch(1);



// 2. Adding a Default Option in Switch Statements

function switchOfStuff(val) {
  let answer = "";
  // Only change code below this line
 switch(val) {
 case "a":
 answer = "apple";
 break;
 case "b":
 answer = "bird";
 break;
 case "c":
 answer = "cat";
 break;
 default:
 answer = "stuff";
 }
 
  return answer;
 
}

switchOfStuff(1);


3. Multiple Identical Options in Switch Statements

function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
switch(val) {
  case 1:
  case 2:
  case 3:
   answer = "Low";
   break;
  case 4:
  case 5:
  case 6:
   answer = "Mid";
   break;
  case 7:
  case 8:
  case 9: 
   answer = "High";
   break;
}



  // Only change code above this line
  return answer;
}

sequentialSizes(1);

4. Replacing If Else Chains with Switch
If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. The following:

if (val === 1) {
  answer = "a";
} else if (val === 2) {
  answer = "b";
} else {
  answer = "c";
}
can be replaced with:

switch(val) {
  case 1:
    answer = "a";
    break;
  case 2:
    answer = "b";
    break;
  default:
    answer = "c";
}







